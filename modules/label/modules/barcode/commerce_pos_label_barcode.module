<?php

/**
 * @file
 * Core hooks and utility functions for Commerce Pos Label Barcodes.
 */

use Picqer\Barcode\BarcodeGeneratorPNG;
use Picqer\Barcode\Exceptions\BarcodeException;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pos_label_barcode_form_commerce_pos_settings_alter(&$form, &$form_state, $form_id) {
  foreach (commerce_product_types() as $name => $type) {
    $variable_name = 'commerce_pos_label_barcode_upc_field_' . $name;
    $options = array(
      '' => t('None'),
      'sku' => t('Base SKU field'),
    );

    foreach (field_info_instances('commerce_product', $name) as $field_name => $field) {
      $options[$field_name] = $field_name;
    }

    $form['field_settings'][$name][$variable_name] = array(
      '#type' => 'select',
      '#title' => t('UPC field'),
      '#options' => $options,
      '#default_value' => variable_get($variable_name, ''),
      '#description '=> t('Select the field that stores your product UPCs.'),
    );
  }

  $form['#submit'][] = 'commerce_pos_label_barcode_form_commerce_pos_settings_submit';
}

/**
 * Additional submit handler for the POS settings form.
 */
function commerce_pos_label_barcode_form_commerce_pos_settings_submit($form, &$form_state) {
  foreach (commerce_product_types() as $name => $type) {
    $variable_name = 'commerce_pos_label_barcode_upc_field_' . $name;
    variable_set($variable_name, $form_state['values'][$variable_name]);
  }
}

/**
 * Implements hook_commerce_pos_label_format_info_alter().
 */
function commerce_pos_label_barcode_commerce_pos_label_format_info_alter(&$formats) {
  $formats['commerce_pos_label_30334']['barcode'] = array(
    'type' => BarcodeGeneratorPNG::TYPE_UPC_A,
    'widthFactor' => 2,
    'totalHeight' => 40,
    'color' => array(0, 0, 0),
  );
}

/**
 * Generates a barcode image for a product.
 *
 * @param stdClass $product
 *   The Commerce Product to generate a barcode for.
 *
 * @param array $format
 *   A label format array, as provided by hook_commerce_pos_label_format_info().
 *
 * @return bool|string
 *   A string with the image data for a barcode, or FALSE if the bar code could
 *   not be generated.
 */
function commerce_pos_label_barcode_generate($product, $format) {
  $generator = new BarcodeGeneratorPNG();
  $upc_field = variable_get('commerce_pos_label_barcode_upc_field_' . $product->type, FALSE);

  if(!empty($upc_field)) {
    if($upc_field == 'sku') {
      $upc_field_value = $product->sku;
    }
    else {
      if($field_upc = field_get_items('commerce_product', $product, $upc_field)) {
        $upc_field_value = $field_upc[0]['value'];
      }
    }
    if($upc_field_value) {
      try {
        $barcode_settings = $format['barcode'];
        $barcode =  $generator->getBarcode($upc_field_value, $barcode_settings['type'], $barcode_settings['widthFactor'], $barcode_settings['totalHeight'], $barcode_settings['color']);
        return $barcode;
      }
      catch (BarcodeException $e) {
        watchdog('commerce_pos_label', 'Unable to generate barcode for product @sku. @exception: @message', array(
          '@exception' => get_class($e),
          '@sku' => $product->sku,
          '@message' => $e->getMessage(),
        ), WATCHDOG_ERROR);
      }
    }
  }

  return FALSE;
}
